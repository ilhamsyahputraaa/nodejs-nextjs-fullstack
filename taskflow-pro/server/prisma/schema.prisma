datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String           @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole         @default(MEMBER)
  accounts      Account[]
  sessions      Session[]
  divisions     DivisionMember[]
  tasks         Task[]           @relation("AssignedTasks")

  Project Project[]
}

model Division {
  id       String           @id @default(cuid())
  name     String
  members  DivisionMember[]
  projects Project[]
}

model DivisionMember {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  division   Division @relation(fields: [divisionId], references: [id])
  divisionId String
  role       UserRole
}

model Project {
  id         String    @id @default(cuid())
  name       String
  division   Division? @relation(fields: [divisionId], references: [id])
  divisionId String?
  tasks      Task[]
  ownerId    String
  owner      User      @relation(fields: [ownerId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Task {
  id           String     @id @default(cuid())
  title        String
  description  String?
  dueDate      DateTime?
  assignedTo   User?      @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId String?
  project      Project    @relation(fields: [projectId], references: [id])
  projectId    String
  status       TaskStatus @default(TODO)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}
